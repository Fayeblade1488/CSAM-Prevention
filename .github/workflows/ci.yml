name: CI
permissions:
  contents: read
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint with Ruff and Mypy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e ".[dev]"

      - name: Lint with Ruff
        run: |
          ruff check src/ tests/ --output-format=github
        continue-on-error: true

      - name: Check formatting with Ruff
        run: |
          ruff format --check src/ tests/
        continue-on-error: true

      - name: Type check with Mypy
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ github.event_name == 'pull_request' && fromJson('["ubuntu-latest"]') || fromJson('["ubuntu-latest", "macos-latest", "windows-latest"]') }}
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python dependencies
        if: hashFiles('pyproject.toml') != ''
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e ".[dev]" || pip install -e .

      - name: Run Python tests
        if: hashFiles('pyproject.toml') != ''
        run: |
          DISABLE_NLP=1 python -m pytest --cov --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        with:
          files: coverage.xml,coverage.out
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: false
          tags: csam-guard:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
